package hello;

import hi.RPlane;

public class Study27_파일분할 {

	public static void main(String[] args) {
		
		RCar car1 = new RCar(1234,25.5);
		
		car1.show();
		//Study27_파일분할에 RCar이라는 클래스를 만들지 않았지만 
		//같은 패키지인 hello 안에 두 클래스가 있기때문에 따로 명령어를 입력하지 않아고
		//객체를 만드는 명령어만 입력해도 객체가 만들어 집니다.
		//eclipse라 자동으로 패키지에 포함이 되었지만 
		//외부 클래스를 같은 패키지로 포함시키려면
		//package 패키지명;을 소스코드 제일 위에 추가해주면 됩니다.
		
		hi.RCar car2 = new hi.RCar(1235,25.6);
		
		car2.show();
		//이번엔 외부 패키지의 클래스를 가져오는 방법을 알아보자
		//hi라는 외부패키지에 RCar이라는 클래스를 만들고 
		//객체를 생성할 떄 외부패키지명.클래스명 객체변수명 = new 외부패키지명.클래스명();으로 생성한다.
		//외부 패키지의 클래스 앞에는 public이 붙어야 다른 패키지에서 호출할 수 있다. public이 없다면 같은 패키지 내에서만 사용가능합니다.
		//위 car1의 RCar와 car2의 RCar는 클래스의 이름은 같지만 패키지가 다른 전혀다른 클래스이다.
		//이처럼 패키지에 의해 나누어진 클래스의 모임을 '네임스페이스'라고 합니다.
		
		RPlane plane = new RPlane(121);
		
		plane.show();
		//외부 패키지의 클래스로 객체를 만들때는  외부패키지명.클래스명 객체변수명 = new 외부패키지명.클래스명();를 사용했지만
		//다른 방법으로 import를 사용하면 된다.
		//우리가 Scanner를 사용할때 import를 많이 사용했다.
		//그것처럼 import 외부패키지명.외부클래스;를 입력하면 따로 객체를 생성할때 외부패키지명은 입력할 필요가 없다.
		
		RCar car3 = new RCar(1245,25.66);
		car3.show();
		//import를 사용했을때 RCar를 외부 패키지명 없이 호출하면 
		//외부 클래스로 객체가 만들어 지는게 아니고 
		//같은 패키지 안에 있는 RCar이 만들어진다.
		//이처럼 같은 클래스명을 가진 외부클래스를 호출할 때에는 패키지명을 붙여주어야한다.
		
		//패키지를 사용하면 파일을 분할하여 사용할 수 있다는 사실을 알았다.
		//이러한 패키지를 또다시 클래스의 기능별로 분류하여 패키지 안에 패키지를 만들 수 있는데
		//이를 '서브 패키지'라고 한다.
		//생성 방법은 
		//package 페키지명.서브패키지명;으로 생성할 수 있다.
		//우리가 Scanner를 호출할 때 import java.util.Scanner;를 예를들면
		//java라는 외부 패키지 안의 util이라는 서브패키지의 Scanner라는 클래스를 호출하는 것이다.
		//이런 Scanner처럼 다양한 클래스 라이브러리가 있는데 찾아보고 필요에 따라 사용하면 된다.
		//또 호출할때 패키지 안에 많은 클래스를 한번에 호출하고 싶다면 
		//import java.util.*;처럼 *을 입력하면된다.
		//이때 호출되는 것은 클래스 뿐이고 서브클래스들은 포함되지 않으니 서브클래스를 호출하려면 별로도 import를 사용해야한다.
	}
}
