package hello;

class Car{
	
	int num;
	double gas;
	
	//오늘은 시작부터 주석을 사용한다.
	//그동안 java코딩을 하면서 class라는 것을 사용했는데
	//이 클래스라는건 사물의 싱테 및 특성,그것에 관련된 기능을 정리하여 프로그램으로 표현한것이라고 한다.
	//솔직히 이말만 들으면 무슨소리인지 모르겠는데 
	//한마디로 프로그램의 틀, 설계도, 상자 같은 것이라고 생각하면 될거 같다..
	//위 클래스가 상태, 특성을 표현하기 위해서 사용하는 수단을 필드라고 한다.
	//필드는 우리가 사용하는 변수를 필드라고 생각하면 된다.
	//class Car {
	//int num;      <- 필드
	//double gas;   <- 필드
	//}
	
	void setNum(int n) {
	//137번째 줄	
		num = n;
		System.out.println("차량의 번호를 " + num + "으로 변경하였습니다.");
		//그동안 메소드를 사용할 때에는 ()안에 아무값도 넣은 게 없는데
		//위 메소드와 아래 메소드에는 각각 int n,double m이 넣어져있다.
		//이것은 인수목록이라고 하는데 
		//이 메소드를 호출할때 
		//car1.setNum(4567);에서 4567이 n의 값에 들어가 져서 그 n이 num에 삽입되어진다.
		//해당 인수목록의 변수는 해당 메소드 안에서만 사용된다. 이때 n을 가인수라고 하고 4567을 실인수라고 한다.	
	}
	
	void setGas(double m) {
	//138번째 줄	
		gas = m;
		System.out.println("연료 양을 " + gas + "로 변경하였습니다.");
	
	}
	
	void setNumGas (int x,double y) {
	//156번째 줄
		num = x;
		gas = y;
		
		System.out.println("차량 변호를 " + num + "으로 변경했고" + "연료 양을 " + gas + "로 변경하였습니다.");
		//인수목록은 1개만 사용하는 것이 아닌 여러 개를 사용 할 수 있습니다.
		//이때 가인수 사이에 ,를 사용하는 것을 잊으면 안되고
		//가인수의 갯수와 실인수의 갯수가 다르면 호출이 불가능하다.
		//ex)car1.setNumGas(number);
		//위 예시는 가인수가 2개인 메소드에 실인수 1개만 넣었기 떄문에 호출이 불가능하다.	
	}
	
	int getNum() {
	//160번째 줄
		System.out.println("차량 번호를 조사했습니다.");
		
		return num;
		//그동안은 메소드에서 호출한 곳의 정보를 받아서 사용되는 기능이였지만
		//이번에는 void가 아닌 int를 사용하여 리턴 값을 다시 호출한 곳으로 반환된다.
		//리턴값의형(type) 메소드명(인수 목록){}에서 그동안은 return값이 없기때문에 
		//void를 사용하였지만 이번에는 num을 다시 호출한 곳으로 반환하기 떄문에 int를 사용하였다.
		//이리고 이 형은식 반드시 'return 식;'을 사용해주어야 한다.
	}
	
	void show() {
	//126번째 줄	
		System.out.println("차량번호는 " + this.num + "입니다.");
		System.out.println("연료 양은 " + gas + "입니다.");
		//이번엔 메소드를 알아보겠다.
		//메소드의 선언방법은 리턴값의형(type) 메소드명(인수 목록){}으로 선언 할 수 있다.
		//리턴값과 인수는 다음에 다시 설명한다고 하니 기다리자
		//위 방법을 메소드를 정의한다 라고 한다.
		//메소드와 필드를 클래스의 맴버라고 한다.
		//우리가 아래에서 다른 클래스에 있는 변수를 사용하기 위해서 car1.num을 사용하였다.
		//이처럼 같은 클래스 내부의 변수를 사용 할 때에는 this.를 붙여주어도 된다.
		//이는 꼭 사용 할 필요는 없다.
		}
	
	void showCar() {
	//135번째 줄	
		System.out.println("지금부터 자동차의 정보를 표시합니다.");
		show();
		//클래스 밖의 메소드를 호출 할 때에는 car1.show()를 사용하였는데
		//같은 클래스에 있는 메소드를 호출하기 위해서는 show()처럼
		//메소드 이름만 입력하여 호출 할 수 있다.
		//이때도 같이 같은 클래스에서 호출했다는 것을 알리기 위해서 this.show()를 사용해도 무관하다.
		}
	
	}

	//우리가 Car라는 클래스를 만들었는데 
	//Car의 번호와 연료량이라는 틀은 만들었지만 실제로 
	//구체적인 내용을 아직 표현하지 않았는데
	//이러한 구체적인 내용을 만드는 것을 '객체를 생성한다'고 한다.

public class Study15_클래스 {
	
	public static void main(String[] args) {
		Car car1;
		car1 = new Car();
		//우리는 car1이라는 변수를 만들고 car1에 위에 class Car의 객체를 대입하였습니다.
		//위 작업을 Car car1 = new Car();로 한줄로 표현 할 수 있습니다.
		//car1은 객체가 생성되는 위치를 가르키기 때문에 객체 그 자체는 아닙니다.
		//이를 참조형 변수라고 합니다.
		//자주 사용하는 변수 등을 필요할때 마다 선언해서 쓰는 것이 아니고 Car라는 클래스를 선언해 
		//그 안에 있는 변수를 사용하면 코드가 훨씬 간결하게 짜일것이다.
		
		car1.num = 1234;
		car1.gas = 20.5;
		//Car클래스의 객체를 생성하면 해당 클래스의 필드를 사용 할 수 있습니다.
		//car1.num은 Car클래스의 num을 사용 할 수 있습니다.
		//이를 멤버에 접근한다고 합니다.
		//이때 접근을 했다고 Car클래스의 num,gas의 값이 바뀌는  것이 아닌 car1이라는 객체의 num의 값이 바뀌는 것이다.
		
		System.out.println("차량번호는 " + car1.num + "입니다.");
		System.out.println("연료 양은 " + car1.gas + "입니다.");
		
		Car car2 = new Car();
		
		car2.num = 4567;
		car2.gas = 15.5;
		
		System.out.println("차량번호는 " + car2.num + "입니다.");
		System.out.println("연료 양은 " + car2.gas + "입니다.");
		//객체는 한개만 만들 수 있는게 아닌 여러개를 만들 수 있습니다.
		
		car1.show();
		//위에 메소드를 선언했는데 선언만 하면 사용할 방법이 없다.
		//선언된 메소드를 사용하기 위해서는 (객체를가르키는변수이름.)메소드이름(인수목록);
		//으로 선언할 수 있다.
		//내가 (객체를가르키는변수이름.)를 괄호를 사용한 이유는 Car클래스에 받아온게 아닌 
		//클래스 자체에 있는 다른 메소드를 선언하기 위해서는 메소드이름(인수목록);으로 선언 할 수 있기 때문이다.
		//이를 메소드를 호출한다 라고 한다.
		//호출된 메소드는 메소드 안에 있는 코드를 한번에 실행합니다.
		
		car1.showCar();
		
		car1.setNum(4567);
		car1.setGas(25.45);
		
		car1.show();
		//위에 set메소드 들을 이용하여 변경된 값이 
		//해당 메소드에서만 변경되어있고 실제로는 반영이 제대로 되었는지 확인해봤는데
		//제대로 변한것을 확인할 수 있다.
		
		int number = 1234;
		double gasoline = 20.5;
		
		car1.setNum(number);
		car1.setGas(gasoline);
		//실인수 값에 변수를 사용하여도 변수의 형만 맞다면 사용 할 수 있다. 
		//실인수의 변수형보다 큰 변수형을 넣으면 오류가 난다.
		//ex)int변수형을 가진 실인수에 double변수형을 넣는다.
		//반대로 double변수형에 int변수형을 넣는 것은 문제가 없다.
		car1.show();
		
		car1.setNumGas(1254,26.4);
		//가인수가 2개이고 각각의 형에 맞춰서 실인수를 넣어주면 된다.
		//이때도 실인수의 변수형보다 큰 변수형을 넣으면 오류가 난다.
		
		int getNumber = car1.getNum();
		
		System.out.println("조사합 차량번호는 " + getNumber + "입니다.");
	}
}

